# ------------------------------------------------------------------
# Licensed under the MIT License. See LICENSE in the project root.
# ------------------------------------------------------------------

const Len{T} = Quantity{T,u"ùêã"}

addunit(x::Number, u) = x * u
addunit(::Quantity, _) = throw(ArgumentError("invalid units, please check the documentation"))

unitless(xs::Quantity...) = ustrip.(promote(xs...))

function uevaluate(distance, p‚ÇÅ, p‚ÇÇ)
  u‚ÇÅ = unit(Meshes.lentype(p‚ÇÅ))
  u‚ÇÇ = unit(Meshes.lentype(p‚ÇÇ))
  u = Unitful.promote_unit(u‚ÇÅ, u‚ÇÇ)
  v‚ÇÅ = ustrip.(u, to(p‚ÇÅ))
  v‚ÇÇ = ustrip.(u, to(p‚ÇÇ))
  evaluate(distance, v‚ÇÅ, v‚ÇÇ) * u
end

"""
    spheredir(Œ∏, œÜ)

Return the 3D direction given polar angle `Œ∏` and
azimuthal angle `œÜ` in degrees according to the ISO
convention.
"""
function spheredir(theta, phi)
  Œ∏, œÜ = deg2rad(theta), deg2rad(phi)
  Vec(sin(Œ∏) * cos(œÜ), sin(Œ∏) * sin(œÜ), cos(Œ∏))
end
