# ------------------------------------------------------------------
# Licensed under the MIT License. See LICENSE in the project root.
# ------------------------------------------------------------------

"""
    EmpiricalTransiogram(data, var; [parameters])

Computes the empirical (a.k.a. experimental) omnidirectional
transiogram for categorical variable `var` stored in geospatial
`data`.

## Parameters

  * nlags     - number of lags (default to `20`)
  * maxlag    - maximum lag in length units (default to 1/10 of minimum side of bounding box)
  * distance  - custom distance function (default to `Euclidean` distance)
  * algorithm - accumulation algorithm (default to `:ball`)

Available algorithms:

  * `:full` - loop over all pairs of points in the data
  * `:ball` - loop over all points inside maximum lag ball

All implemented algorithms produce the exact same result.
The `:ball` algorithm is considerably faster when the
maximum lag is much smaller than the bounding box of
the domain of the data.

See also: [`DirectionalTransiogram`](@ref), [`PlanarTransiogram`](@ref).

## References

* Carle, S.F. & Fogg, G.E. 1996. [Transition probability-based
  indicator geostatistics](https://link.springer.com/article/10.1007/BF02083656)

* Carle et al 1998. [Conditional Simulation of Hydrofacies Architecture:
  A Transition Probability/Markov Approach](https://doi.org/10.2110/sepmcheg.01.147)
"""
struct EmpiricalTransiogram{‚Ñí<:Len,V,D,E} <: EmpiricalFunction
  counts::Vector{Int}
  abscissas::Vector{‚Ñí}
  ordinates::Matrix{Vector{V}}
  distance::D
  estimator::E
end

function EmpiricalTransiogram(
  data::AbstractGeoTable,
  var;
  nlags=20,
  maxlag=defaultmaxlag(data),
  distance=Euclidean(),
  algorithm=:ball
)
  # retrieve table and domain
  ùíØ = values(data)
  ùíü = domain(data)

  # empirical estimators are defined on point sets
  ùíÆ = georef(ùíØ, [centroid(ùíü, i) for i in 1:nelements(ùíü)])

  # transiograms are estimated based on indicators
  ‚Ñê = ùíÆ |> OneHot(var)

  # pairs of indicator variables
  ivars = ‚Ñê |> values |> Tables.columns |> Tables.columnnames
  pairs = Iterators.product(ivars, ivars) |> collect

  # retrieve estimator and algorithm
  estim, algo = estimalgo(ùíü, nlags, maxlag, distance, :carle, algorithm)

  # accumulate data with chosen algorithm
  counts, abscissas, ordinates = accumulate(‚Ñê, pairs, estim, algo)

  EmpiricalTransiogram(counts, abscissas, ordinates, distance, estim)
end

"""
    EmpiricalTransiogram(partition, var‚ÇÅ, var‚ÇÇ=var‚ÇÅ; [parameters])

Compute the empirical (cross-)variogram of the geospatial `partition` for
variables `var‚ÇÅ` and `var‚ÇÇ` as described in Hoffimann & Zadrozny 2019.

Optionally, forward `parameters` for the underlying [`EmpiricalTransiogram`](@ref).
"""
function EmpiricalTransiogram(partition::Partition, var‚ÇÅ, var‚ÇÇ=var‚ÇÅ; kwargs...)
  # retain geospatial data with at least two elements
  filtered = Iterators.filter(d -> nelements(domain(d)) > 1, partition)
  @assert !isempty(filtered) "invalid partition of geospatial data"
  Œ≥(d) = EmpiricalTransiogram(d, var‚ÇÅ, var‚ÇÇ; kwargs...)
  tmapreduce(Œ≥, merge, collect(filtered))
end

"""
    DirectionalTransiogram(direction, data, var‚ÇÅ, var‚ÇÇ=var‚ÇÅ; dtol=1e-6u"m", [parameters])

Computes the empirical (cross-)variogram for the variables `var‚ÇÅ` and `var‚ÇÇ` stored in
geospatial `data` along a given `direction` with band tolerance `dtol` in length units.

Optionally, forward `parameters` for the underlying [`EmpiricalTransiogram`](@ref).
"""
function DirectionalTransiogram(dir, data::AbstractGeoTable, var‚ÇÅ, var‚ÇÇ=var‚ÇÅ; dtol=1e-6u"m", kwargs...)
  rng = MersenneTwister(123)
  Œ† = partition(rng, data, DirectionPartition(dir; tol=dtol))
  EmpiricalTransiogram(Œ†, var‚ÇÅ, var‚ÇÇ; kwargs...)
end

"""
    PlanarTransiogram(normal, data, var‚ÇÅ, var‚ÇÇ=var‚ÇÅ; ntol=1e-6u"m", [parameters])

Computes the empirical (cross-)variogram for the variables `var‚ÇÅ` and `var‚ÇÇ` stored in
geospatial `data` along a plane perpendicular to a `normal` direction with plane
tolerance `ntol` in length units.

Optionally, forward `parameters` for the underlying [`EmpiricalTransiogram`](@ref).
"""
function PlanarTransiogram(normal, data::AbstractGeoTable, var‚ÇÅ, var‚ÇÇ=var‚ÇÅ; ntol=1e-6u"m", kwargs...)
  rng = MersenneTwister(123)
  Œ† = partition(rng, data, PlanePartition(normal; tol=ntol))
  EmpiricalTransiogram(Œ†, var‚ÇÅ, var‚ÇÇ; kwargs...)
end

"""
    merge(tŒ±, tŒ≤)

Merge the empirical transiogram `tŒ±` with the empirical transiogram `tŒ≤`
assuming that both transiograms have the same number of lags, distance
and estimator.
"""
function merge(tŒ±::EmpiricalTransiogram{‚Ñí,V,D,E}, tŒ≤::EmpiricalTransiogram{‚Ñí,V,D,E}) where {‚Ñí,V,D,E}
  nŒ± = tŒ±.counts
  nŒ≤ = tŒ≤.counts
  xŒ± = tŒ±.abscissas
  xŒ≤ = tŒ≤.abscissas
  YŒ± = tŒ±.ordinates
  YŒ≤ = tŒ≤.ordinates

  # copy distance and estimator
  d = tŒ±.distance
  e = tŒ±.estimator

  # merge function for estimator
  mergefun(yŒ±, nŒ±, yŒ≤, nŒ≤) = combine(e, yŒ±, nŒ±, yŒ≤, nŒ≤)

  # merge coordinates and bin counts
  n = nŒ± + nŒ≤
  x = @. (xŒ± * nŒ± + xŒ≤ * nŒ≤) / n
  Y = map(zip(YŒ±, YŒ≤)) do (yŒ±, yŒ≤)
    @. mergefun(yŒ±, nŒ±, yŒ≤, nŒ≤)
  end

  # adjust empty bins
  x[n .== 0] .= xŒ±[n .== 0]
  for y in Y
    y[n .== 0] .= 0
  end

  EmpiricalTransiogram(n, x, Y, d, e)
end
