# ------------------------------------------------------------------
# Licensed under the MIT License. See LICENSE in the project root.
# ------------------------------------------------------------------

"""
    EmpiricalVariogram(data, var‚ÇÅ, var‚ÇÇ=var‚ÇÅ; [parameters])

Computes the empirical (a.k.a. experimental) omnidirectional
(cross-)variogram for variables `var‚ÇÅ` and `var‚ÇÇ` stored in
geospatial `data`.

## Parameters

  * nlags     - number of lags (default to `20`)
  * maxlag    - maximum lag in length units (default to 1/10 of minimum side of bounding box)
  * distance  - custom distance function (default to `Euclidean` distance)
  * estimator - variogram estimator (default to `:matheron` estimator)
  * algorithm - accumulation algorithm (default to `:ball`)

Available estimators:

  * `:matheron` - simple estimator based on squared differences
  * `:cressie`  - robust estimator based on 4th power of differences

Available algorithms:

  * `:full` - loop over all pairs of points in the data
  * `:ball` - loop over all points inside maximum lag ball

All implemented algorithms produce the exact same result.
The `:ball` algorithm is considerably faster when the
maximum lag is much smaller than the bounding box of
the domain of the data.

See also: [`DirectionalVariogram`](@ref), [`PlanarVariogram`](@ref),
[`EmpiricalVarioplane`](@ref).

## References

* Chil√®s, JP and Delfiner, P. 2012. [Geostatistics: Modeling Spatial Uncertainty]
  (https://onlinelibrary.wiley.com/doi/book/10.1002/9781118136188)

* Webster, R and Oliver, MA. 2007. [Geostatistics for Environmental Scientists]
  (https://onlinelibrary.wiley.com/doi/book/10.1002/9780470517277)

* Hoffimann, J and Zadrozny, B. 2019. [Efficient variography with partition variograms]
  (https://www.sciencedirect.com/science/article/pii/S0098300419302936)
"""
struct EmpiricalVariogram{‚Ñí<:Len,V,D,E}
  abscissa::Vector{‚Ñí}
  ordinate::Vector{V}
  counts::Vector{Int}
  distance::D
  estimator::E
end

function EmpiricalVariogram(
  data::AbstractGeoTable,
  var‚ÇÅ,
  var‚ÇÇ=var‚ÇÅ;
  nlags=20,
  maxlag=_defaultmaxlag(data),
  distance=Euclidean(),
  estimator=:matheron,
  algorithm=:ball
)
  # retrieve table and domain
  ùíØ = values(data)
  ùíü = domain(data)

  # empirical estimators are defined on point sets
  ùíÆ = georef(ùíØ, [centroid(ùíü, i) for i in 1:nelements(ùíü)])

  # retrieve estimator and algorithm
  estim, algo = estimalgo(ùíü, nlags, maxlag, distance, estimator, algorithm)

  # accumulate data with chosen algorithm
  abscissa, ordinate, counts = accumulate(ùíÆ, var‚ÇÅ, var‚ÇÇ, estim, algo)

  EmpiricalVariogram(abscissa, ordinate, counts, distance, estim)
end

"""
    EmpiricalVariogram(partition, var‚ÇÅ, var‚ÇÇ=var‚ÇÅ; [parameters])

Compute the empirical (cross-)variogram of the geospatial `partition` for
variables `var‚ÇÅ` and `var‚ÇÇ` as described in Hoffimann & Zadrozny 2019.

Optionally, forward `parameters` for the underlying [`EmpiricalVariogram`](@ref).

## References

* Hoffimann, J and Zadrozny, B. 2019. [Efficient variography with partition variograms]
  (https://www.sciencedirect.com/science/article/pii/S0098300419302936)
"""
function EmpiricalVariogram(partition::Partition, var‚ÇÅ, var‚ÇÇ=var‚ÇÅ; kwargs...)
  # retain geospatial data with at least two elements
  filtered = Iterators.filter(d -> nelements(domain(d)) > 1, partition)
  @assert !isempty(filtered) "invalid partition of geospatial data"
  Œ≥(d) = EmpiricalVariogram(d, var‚ÇÅ, var‚ÇÇ; kwargs...)
  tmapreduce(Œ≥, merge, collect(filtered))
end

"""
    DirectionalVariogram(direction, data, var‚ÇÅ, var‚ÇÇ=var‚ÇÅ; dtol=1e-6u"m", [parameters])

Computes the empirical (cross-)variogram for the variables `var‚ÇÅ` and `var‚ÇÇ` stored in
geospatial `data` along a given `direction` with band tolerance `dtol` in length units.

Optionally, forward `parameters` for the underlying [`EmpiricalVariogram`](@ref).
"""
function DirectionalVariogram(dir, data::AbstractGeoTable, var‚ÇÅ, var‚ÇÇ=var‚ÇÅ; dtol=1e-6u"m", kwargs...)
  rng = MersenneTwister(123)
  Œ† = partition(rng, data, DirectionPartition(dir; tol=dtol))
  EmpiricalVariogram(Œ†, var‚ÇÅ, var‚ÇÇ; kwargs...)
end

"""
    PlanarVariogram(normal, data, var‚ÇÅ, var‚ÇÇ=var‚ÇÅ; ntol=1e-6u"m", [parameters])

Computes the empirical (cross-)variogram for the variables `var‚ÇÅ` and `var‚ÇÇ` stored in
geospatial `data` along a plane perpendicular to a `normal` direction with plane
tolerance `ntol` in length units.

Optionally, forward `parameters` for the underlying [`EmpiricalVariogram`](@ref).
"""
function PlanarVariogram(normal, data::AbstractGeoTable, var‚ÇÅ, var‚ÇÇ=var‚ÇÅ; ntol=1e-6u"m", kwargs...)
  rng = MersenneTwister(123)
  Œ† = partition(rng, data, PlanePartition(normal; tol=ntol))
  EmpiricalVariogram(Œ†, var‚ÇÅ, var‚ÇÇ; kwargs...)
end

"""
    values(Œ≥)

Returns the abscissa, the ordinate, and the bin counts
of the empirical variogram `Œ≥`.
"""
Base.values(Œ≥::EmpiricalVariogram) = Œ≥.abscissa, Œ≥.ordinate, Œ≥.counts

"""
    distance(Œ≥)

Return the distance used to compute the empirical variogram `Œ≥`.
"""
distance(Œ≥::EmpiricalVariogram) = Œ≥.distance

"""
    estimator(Œ≥)

Return the estimator used to compute the empirical variogram `Œ≥`.
"""
estimator(Œ≥::EmpiricalVariogram) = Œ≥.estimator

"""
    merge(Œ≥Œ±, Œ≥Œ≤)

Merge the empirical variogram `Œ≥Œ±` with the empirical variogram `Œ≥Œ≤`
assuming that both variograms have the same number of lags, distance
and estimator.
"""
function merge(Œ≥Œ±::EmpiricalVariogram{V,D,E}, Œ≥Œ≤::EmpiricalVariogram{V,D,E}) where {V,D,E}
  xŒ± = Œ≥Œ±.abscissa
  xŒ≤ = Œ≥Œ≤.abscissa
  yŒ± = Œ≥Œ±.ordinate
  yŒ≤ = Œ≥Œ≤.ordinate
  nŒ± = Œ≥Œ±.counts
  nŒ≤ = Œ≥Œ≤.counts

  # copy distance and estimator
  d = Œ≥Œ±.distance
  e = Œ≥Œ±.estimator

  # merge function for estimator
  mergefun(yŒ±, nŒ±, yŒ≤, nŒ≤) = combine(e, yŒ±, nŒ±, yŒ≤, nŒ≤)

  # merge coordinates and bin counts
  n = nŒ± + nŒ≤
  x = @. (xŒ± * nŒ± + xŒ≤ * nŒ≤) / n
  y = @. mergefun(yŒ±, nŒ±, yŒ≤, nŒ≤)

  # adjust empty bins
  x[n .== 0] .= xŒ±[n .== 0]
  y[n .== 0] .= 0

  EmpiricalVariogram(x, y, n, d, e)
end

# -----------
# IO METHODS
# -----------

function Base.show(io::IO, Œ≥::EmpiricalVariogram)
  ioctx = IOContext(io, :compact => true)
  print(ioctx, "EmpiricalVariogram(")
  print(ioctx, "abscissa: ")
  _printvec(ioctx, Œ≥.abscissa, 1)
  print(ioctx, ", ordinate: ")
  _printvec(ioctx, Œ≥.ordinate, 1)
  print(ioctx, ", distance: ", Œ≥.distance)
  print(ioctx, ", estimator: ", Œ≥.estimator)
  print(ioctx, ", npairs: ", sum(Œ≥.counts))
  print(ioctx, ")")
end

function Base.show(io::IO, ::MIME"text/plain", Œ≥::EmpiricalVariogram)
  ioctx = IOContext(io, :compact => true, :limit => true)
  println(ioctx, "EmpiricalVariogram")
  print(ioctx, "‚îú‚îÄ abscissa: ")
  _printlnvec(ioctx, Œ≥.abscissa, 3)
  print(ioctx, "‚îú‚îÄ ordinate: ")
  _printlnvec(ioctx, Œ≥.ordinate, 3)
  println(ioctx, "‚îú‚îÄ distance: ", Œ≥.distance)
  println(ioctx, "‚îú‚îÄ estimator: ", Œ≥.estimator)
  print(ioctx, "‚îî‚îÄ npairs: ", sum(Œ≥.counts))
end

# -----------------
# HELPER FUNCTIONS
# -----------------

_defaultmaxlag(data) = _minside(boundingbox(domain(data))) / 10

function _minside(box)
  s = _sides(box)
  minimum(filter(>(zero(eltype(s))), s))
end

_sides(box::Box{<:ùîº}) = sides(box)

function _sides(box::Box{<:üåê})
  r = vertices(boundary(box))
  s1 = length(Segment(r[1], r[2]))
  s2 = length(Segment(r[2], r[3]))
  s3 = length(Segment(r[3], r[4]))
  s4 = length(Segment(r[4], r[1]))
  (s1, s2, s3, s4)
end

function _printlnvec(io, vec, n)
  _printvec(io, vec, n)
  println(io)
end

function _printvec(io, vec, n)
  print(io, "[")
  if length(vec) > 2n
    k = n - 1
    join(io, vec[begin:(begin + k)], ", ")
    print(io, ", ..., ")
    join(io, vec[(end - k):end], ", ")
  else
    join(io, vec, ", ")
  end
  print(io, "]")
end
